name: Release Build

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  metadata:
    name: Build Metadata
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

  test:
    name: Vet and Test
    runs-on: ubuntu-20.04

    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Configure github token
      env:
        TOKEN_USER: ${{ secrets.WORKFLOW_TOKEN_USER }}
        TOKEN: ${{ secrets.WORKFLOW_TOKEN}}
      run: |
        git config --global url."https://${TOKEN_USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Get dependencies
      run: |
        git config -l --global
        go get -v -t -d ./...

    - name: Vet
      run: |
        go vet ./...

    - name: Test
      run: go test -v ./...

    - name: Test Race Conditions
      run: go test -race -v ./...

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
      - metadata
      - test

    strategy:
      matrix:
        os: [linux]
        arch: [amd64]

    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      OUTPUT_FILE: function-${{ github.event.repository.name }}_${{ needs.metadata.outputs.version }}

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Configure github token
      env:
        TOKEN_USER: ${{ secrets.WORKFLOW_TOKEN_USER }}
        TOKEN: ${{ secrets.WORKFLOW_TOKEN}}
      run: |
        git config --global url."https://${TOKEN_USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Get dependencies
      run: |
        git config -l --global
        go get -v -t -d ./...

    - name: Go Build
      run: |
        go build -o "${{ env.OUTPUT_FILE }}" -v .

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.OUTPUT_FILE }}
        path: ${{ env.OUTPUT_FILE }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

  release_assets:
    name: Attach Release Assets
    needs:
      - metadata
      - release
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        os: [linux]
        arch: [amd64]
    env:
      INPUT_FILE: function-${{ github.event.repository.name }}_${{ needs.metadata.outputs.version }}
      OUTPUT_FILE: function-${{ github.event.repository.name }}_${{ needs.metadata.outputs.version }}.zip

    steps:
      - name: Download Asset
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.INPUT_FILE }}

      - name: Zip Asset
        run: zip "./${{ env.OUTPUT_FILE }}" "${{ env.INPUT_FILE }}"

      - name: Attach Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_content_type: application/zip
          asset_path: ./${{ env.OUTPUT_FILE }}
          asset_name: ${{ env.OUTPUT_FILE }}

      - name: Upload S3 Release Asset
        id: upload-s3-release-asset 
        env:
          AWS_S3_BUCKET: releases.lab.dioad.net
          AWS_ACCESS_KEY_ID: ${{ secrets.ARTIFACT_UPLOAD_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ARTIFACT_UPLOAD_S3_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-2'
        run: |
          sha256sum ${{ env.OUTPUT_FILE }} > ${{ env.OUTPUT_FILE }}_SHA256SUMS
          aws s3 cp ${{ env.OUTPUT_FILE }} s3://${{ env.AWS_S3_BUCKET }}/${{ github.event.repository.name }}/${{ needs.metadata.outputs.version }}/${{ env.OUTPUT_FILE }} \
             --no-guess-mime-type \
             --content-type "application/zip" \
             --no-progress \
             --sse AES256
          aws s3 cp ${{ env.OUTPUT_FILE }}_SHA256SUMS s3://${{ env.AWS_S3_BUCKET }}/${{ github.event.repository.name }}/${{ needs.metadata.outputs.version }}/${{ env.OUTPUT_FILE }}_SHA256SUMS \
             --no-guess-mime-type \
             --content-type "text/plain" \
             --no-progress \
             --sse AES256

